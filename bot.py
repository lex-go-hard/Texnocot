<<<<<<< HEAD
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import sqlite3
from dotenv import load_dotenv
import os
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("keys.env")
GROUP_TOKEN = os.getenv('GROUP_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã
ADMIN_ID = int(os.getenv('ADMIN_ID'))
ADMIN_ID2 = int(os.getenv('ADMIN_ID2'))
USER_TOKEN = os.getenv('USER_TOKEN')  # –¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_db.sqlite')
cursor = conn.cursor()


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def create_tables():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS keywords (
            keyword TEXT PRIMARY KEY,
            response TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS message_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            keyword TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")


# üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
create_tables()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=GROUP_TOKEN)
longpoll = VkBotLongPoll(vk_session, GROUP_ID)
vk = vk_session.get_api()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ VK API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –∏ –æ–ø—Ä–æ—Å–∞
try:
    user_vk_session = vk_api.VkApi(token=USER_TOKEN)
    user_vk = user_vk_session.get_api()
except vk_api.exceptions.ApiError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ USER_TOKEN: {e}")
    raise SystemExit("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ USER_TOKEN –≤ keys.env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")


# üì© –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(peer_id, text):
    vk.messages.send(
        peer_id=peer_id,
        message=text,
        random_id=0
    )


# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_admin_stats():
    cursor.execute('''
        SELECT keyword, COUNT(*) as count,
               (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM message_log)) as percent
        FROM message_log
        GROUP BY keyword
        ORDER BY count DESC
    ''')
    return cursor.fetchall()


# üì® –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
def get_group_members():
    members = vk.groups.getMembers(group_id=GROUP_ID)['items']
    return members


# üÜï –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
def get_group_admins():
    try:
        admins = vk.groups.getMembers(group_id=GROUP_ID, filter='managers')['items']
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admins}")  # –û—Ç–ª–∞–¥–∫–∞
        return [admin['id'] for admin in admins]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_group_admins: {e}")
        return None


# üÜï –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
def create_admin_chat(chat_title):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = get_group_admins()
        if admins is None or not admins:
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç."

        # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ —á–µ—Ä–µ–∑ USER_TOKEN
        bot_info = user_vk_session.method('users.get')
        if not bot_info or len(bot_info) == 0:
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –±–æ—Ç–∞ —á–µ—Ä–µ–∑ USER_TOKEN."
        bot_id = bot_info[0]['id']
        print(f"ID –±–æ—Ç–∞: {bot_id}")  # –û—Ç–ª–∞–¥–∫–∞

        # –ò—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_ids = [admin_id for admin_id in admins if admin_id != bot_id]
        print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {admin_ids}")  # –û—Ç–ª–∞–¥–∫–∞

        if not admin_ids:
            return None, "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç (–±–æ—Ç –∏—Å–∫–ª—é—á—ë–Ω)."

        # –°–æ–∑–¥–∞—ë–º —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω
        chat_id = user_vk.messages.createChat(
            user_ids=admin_ids[:10],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ ‚Äî –¥–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            title=chat_title
        )

        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
        if len(admin_ids) > 10:
            remaining_admins = admin_ids[10:50]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 50 –∑–∞ —Ä–∞–∑
            vk.messages.addChatUsers(
                chat_id=chat_id,
                user_ids=remaining_admins
            )

        return chat_id, admin_ids
    except vk_api.exceptions.ApiError as e:
        return None, f"–û—à–∏–±–∫–∞ VK API: {e}"
    except Exception as e:
        return None, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"


# –§–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
awaiting_news_message = False

# –§–ª–∞–≥–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
awaiting_poll_question = False
awaiting_poll_options = False
awaiting_poll_settings = False
poll_question = ""
poll_options = []

# –§–ª–∞–≥–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /group
awaiting_chat_title = False

# üõ†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        message = event.object.message
        msg_text = message['text'].lower()
        user_id = message['from_id']
        peer_id = message['peer_id']

        print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: '{msg_text}' –æ—Ç user_id: {user_id} | peer_id: {peer_id}")

        # üë®‚Äçüíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ /stats
        if msg_text == "/stats" and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            stats = get_admin_stats()
            response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            for keyword, count, percent in stats:
                response += f"- {keyword}: {count} ({round(percent, 2)}%)\n"
            send_message(peer_id, response)
            continue

        # üë®‚Äçüíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ /group
        if msg_text == "/group" and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            send_message(peer_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ:")
            awaiting_chat_title = True
            continue

        # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è /group
        if awaiting_chat_title and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            chat_title = message['text']
            chat_id, result = create_admin_chat(chat_title)
            if chat_id:
                admin_ids = result
                admin_list = "\n".join([f"- {aid}" for aid in admin_ids])
                send_message(peer_id, f"‚úÖ –ß–∞—Ç '{chat_title}' —Å–æ–∑–¥–∞–Ω (ID: {chat_id + 2000000000}).\n"
                                      f"–ê:\n{admin_list}")
            else:
                send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {result}")
            awaiting_chat_title = False
            continue

        # üë®‚Äçüíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ /poll
        if msg_text == "/poll" and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            send_message(peer_id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:")
            awaiting_poll_question = True
            continue

        # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞
        if awaiting_poll_question and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            poll_question = msg_text
            send_message(peer_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1. –æ—Ç–≤–µ—Ç; 2. –æ—Ç–≤–µ—Ç':")
            awaiting_poll_question = False
            awaiting_poll_options = True
            continue

        # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
        if awaiting_poll_options and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            poll_options = [option.strip() for option in msg_text.split(';')]
            send_message(peer_id, "–í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞ (—Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n"
                                  "1. –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å\n"
                                  "2. –í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
                                  "3. –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –æ—Ç–º–µ–Ω—É –≥–æ–ª–æ—Å–∞\n"
                                  "–ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ 0 0 0.")
            awaiting_poll_options = False
            awaiting_poll_settings = True
            continue

        # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞
        if awaiting_poll_settings and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            settings = msg_text.split(" ")
            is_anonymous = '1' in settings
            is_multiple = '2' in settings
            disable_unvote = '3' in settings

            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ JSON-—Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
                answers_json = json.dumps([option for option in poll_options], ensure_ascii=False)

                # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ user-token
                if settings and settings != ["0", "0", "0"]:
                    poll = user_vk.polls.create(
                        question=poll_question,
                        add_answers=answers_json,
                        owner_id=ADMIN_ID,
                        is_anonymous=is_anonymous,
                        is_multiple=is_multiple,
                        disable_unvote=disable_unvote
                    )
                else:
                    poll = user_vk.polls.create(
                        question=poll_question,
                        add_answers=answers_json,
                        owner_id=ADMIN_ID
                    )

                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –æ–ø—Ä–æ—Å–æ–º –≤ –≥—Ä—É–ø–ø–µ
                post = vk.wall.post(
                    owner_id=-GROUP_ID,
                    message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å!",
                    attachments=f"poll{poll['owner_id']}_{poll['id']}"
                )

                send_message(peer_id, "‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ —Å—Ç–µ–Ω–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.")
            except Exception as e:
                send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")

            awaiting_poll_settings = False
            poll_question, poll_options = "", []
            continue

        # üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        cursor.execute("SELECT keyword, response FROM keywords")
        keywords = cursor.fetchall()
        response = None
        matched_keyword = None

        for keyword, resp in keywords:
            if keyword in msg_text:
                response = resp
                matched_keyword = keyword
                break

        # üìù –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if response:
            send_message(peer_id, response)
            cursor.execute('''
                INSERT INTO message_log (user_id, keyword)
                VALUES (?, ?)
            ''', (user_id, matched_keyword))
        else:
            send_message(peer_id, "‚ùå –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –û–ø–∏—à–∏—Ç–µ –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")

        conn.commit()
=======
import json
import os
import sqlite3
from datetime import datetime as time

import pandas as pd
import vk_api
from dotenv import load_dotenv
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("keys.env")
GROUP_TOKEN = os.getenv('GROUP_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))
ADMIN_ID = list(map(int, os.getenv('ADMIN_ID').split(",")))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_db1.sqlite')
cursor = conn.cursor()


# üì® –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
def get_group_members():
    members = vk.groups.getMembers(group_id=GROUP_ID)['items']
    return members


# –§–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
awaiting_news_message = False


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def create_tables():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS keywords (
            keyword TEXT PRIMARY KEY,
            response TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_name TEXT,
            last_name TEXT,
            age INTEGER,
            gender TEXT,
            city TEXT,
            status TEXT,
            last_seen DATETIME,
            message_count INTEGER DEFAULT 0,
            is_ignored INTEGER DEFAULT 0
        )
    ''')
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É is_ignored, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN is_ignored INTEGER DEFAULT 0")
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    conn.commit()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")


# üìä –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_user_stats():
    try:
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        cursor.execute('''
            SELECT age, COUNT(*) as count 
            FROM users 
            WHERE age IS NOT NULL 
            GROUP BY age 
            ORDER BY count DESC
        ''')
        age_stats = cursor.fetchall()
        age_percentages = {age: (count / total_users * 100) for age, count in age_stats}
        cursor.execute('''
            SELECT gender, COUNT(*) as count 
            FROM users 
            WHERE gender IS NOT NULL 
            GROUP BY gender 
            ORDER BY count DESC
        ''')
        gender_stats = cursor.fetchall()
        gender_percentages = {gender: (count / total_users * 100) for gender, count in gender_stats}
        cursor.execute('''
            SELECT user_id, first_name, last_name, age, gender, city, status, last_seen 
            FROM users 
            ORDER BY last_seen DESC
        ''')
        user_activity_stats = cursor.fetchall()
        return {
            "total_users": total_users,
            "age_percentages": age_percentages,
            "gender_percentages": gender_percentages,
            "user_activity_stats": user_activity_stats
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return None


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def update_user_info(user_id):
    try:
        user_info = vk.users.get(user_ids=user_id, fields='first_name,last_name,sex,city,bdate,status,last_seen')[0]
        first_name = user_info.get('first_name', '')
        last_name = user_info.get('last_name', '')
        gender = "–ú—É–∂—Å–∫–æ–π" if user_info.get("sex", 0) == 2 else "–ñ–µ–Ω—Å–∫–∏–π" if user_info.get("sex",
                                                                                           0) == 1 else "–ù–µ —É–∫–∞–∑–∞–Ω"
        city = user_info.get('city', {}).get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')
        bdate = user_info.get('bdate', '')
        status = user_info.get('status', '')
        last_seen = time.fromtimestamp(user_info.get('last_seen', {}).get('time', 0))
        age = None
        if bdate:
            try:
                birth_date = time.strptime(bdate, "%d.%m.%Y")
                age = time.now().year - birth_date.year
            except ValueError:
                pass
        cursor.execute('''
            UPDATE users SET first_name=?, last_name=?, age=?, gender=?, city=?, status=?, last_seen=?
            WHERE user_id=?
        ''', (first_name, last_name, age, gender, city, status, last_seen, user_id))
        if cursor.rowcount == 0:
            cursor.execute('''
                INSERT INTO users (user_id, first_name, last_name, age, gender, city, status, last_seen, message_count, is_ignored)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, 0, 0)
            ''', (user_id, first_name, last_name, age, gender, city, status, last_seen))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")


# üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
def handle_file_upload(file_url, peer_id):
    try:
        df = pd.read_excel(file_url)
        if 'keyword' not in df.columns or 'response' not in df.columns:
            send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞! –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: 'keyword' –∏ 'response'.")
            return
        df = df[['keyword', 'response']].drop_duplicates().dropna()
        cursor.execute("SELECT keyword FROM keywords")
        existing_keywords = {row[0] for row in cursor.fetchall()}
        new_data = df[~df['keyword'].isin(existing_keywords)]
        for _, row in new_data.iterrows():
            cursor.execute("INSERT INTO keywords (keyword, response) VALUES (?, ?)", (row['keyword'], row['response']))
        conn.commit()
        send_message(peer_id, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    except Exception as e:
        send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


# üì© –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(peer_id, text, keyboard=None):
    params = {
        'peer_id': peer_id,
        'message': str(text),
        'random_id': 0
    }
    if keyboard:
        params['keyboard'] = keyboard
    vk.messages.send(**params)


# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_admin_stats():
    cursor.execute('''
        SELECT keyword, COUNT(*) as count, 
               (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM message_log)) as percent 
        FROM message_log 
        GROUP BY keyword 
        ORDER BY count DESC
    ''')
    return cursor.fetchall()


def can_send_message(user_id):
    try:
        response = vk.messages.isMessagesFromGroupAllowed(group_id=GROUP_ID, user_id=user_id)
        return response['is_allowed']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {e}")
        return False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=GROUP_TOKEN)
longpoll = VkBotLongPoll(vk_session, GROUP_ID)
vk = vk_session.get_api()
create_tables()

# üõ†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        message = event.object.message
        msg_text = message['text'].lower()
        user_id = message['from_id']
        peer_id = message['peer_id']
        print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: '{msg_text}' –æ—Ç user_id: {user_id} | peer_id: {peer_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        update_user_info(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥–Ω–æ—Ä–∞
        if 'payload' in message:
            try:
                payload = json.loads(message['payload'])
                if payload.get('action') == "reset_counter":
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Å—Ç–∞—Ç—É—Å –∏–≥–Ω–æ—Ä–∞
                    cursor.execute("UPDATE users SET message_count = 0, is_ignored = 0 WHERE user_id = ?", (user_id,))
                    conn.commit()

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    cursor.execute("SELECT first_name, last_name FROM users WHERE user_id = ?", (user_id,))
                    user_info = cursor.fetchone()
                    if user_info:
                        first_name, last_name = user_info
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                        for admin_id in ADMIN_ID:
                            if can_send_message(admin_id):
                                send_message(
                                    admin_id,
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [id{user_id}|{first_name} {last_name}] —É–∂–µ –ø–æ–º–æ–≥–ª–∏."
                                )
                        send_message(peer_id, "‚úÖ –í–∞—à —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª —Å–±—Ä–æ—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
                    continue

                elif payload.get('action') == "respond":
                    user_to_ignore = payload.get('user_id')
                    cursor.execute("UPDATE users SET is_ignored = 1 WHERE user_id = ?", (user_to_ignore,))
                    conn.commit()
                    send_message(peer_id,
                                 f"–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id{user_to_ignore}|]. –ë–æ—Ç –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                    continue
            except json.JSONDecodeError:
                pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∏–≥–Ω–æ—Ä–∞
        cursor.execute("SELECT is_ignored FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        is_ignored = result[0] if result else 0

        if is_ignored:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {user_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
            keyboard = VkKeyboard(one_time=True)
            keyboard.add_button('–Ø –ø–æ–ª—É—á–∏–ª –ø–æ–º–æ—â—å', color=VkKeyboardColor.POSITIVE,
                                payload=json.dumps({"action": "reset_counter"}))
            send_message(
                peer_id,text="–∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è",
                keyboard=keyboard.get_keyboard()
            )
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if msg_text == "/stats_users" and user_id in ADMIN_ID:
            stats = get_user_stats()
            if stats:
                response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n\n"
                response += "üìà –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"
                for age, percent in stats['age_percentages'].items():
                    response += f"- {age} –ª–µ—Ç: {round(percent, 2)}%\n"
                response += "\nüë´ –ü–æ–ª:\n"
                for gender, percent in stats['gender_percentages'].items():
                    response += f"- {gender}: {round(percent, 2)}%\n"
                response += "\nüïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                for user in stats['user_activity_stats'][:10]:
                    user_id, first_name, last_name, age, gender, city, status, last_seen = user
                    response += (
                        f"üë§ {first_name} {last_name} (ID: {user_id})\n"
                        f"- –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen}\n\n"
                    )
                send_message(peer_id, response)
            else:
                send_message(peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
            continue

        if msg_text == "/upload" and user_id in ADMIN_ID:
            send_message(peer_id, "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–≤—É–º—è —Å—Ç–æ–ª–±—Ü–∞–º–∏: 'keyword' –∏ 'response'.")
            for event in longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    upload_message = event.object.message
                    if upload_message['from_id'] in ADMIN_ID and 'attachments' in upload_message:
                        for attachment in upload_message['attachments']:
                            if attachment['type'] == 'doc' and attachment['doc']['ext'] == 'xlsx':
                                file_url = attachment['doc']['url']
                                handle_file_upload(file_url, peer_id)
                                break
                        break
            continue

        if msg_text == "/news" and user_id in ADMIN_ID:
            send_message(peer_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
            awaiting_news_message = True
            continue

        if awaiting_news_message and user_id in ADMIN_ID:
            news_message = msg_text
            members = get_group_members()
            for member in members:
                try:
                    send_message(member, news_message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member}: {e}")
            send_message(peer_id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            awaiting_news_message = False
            continue

        if msg_text == "/stats" and user_id in ADMIN_ID:
            stats = get_admin_stats()
            response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            for keyword, count, percent in stats:
                response += f"- {keyword}: {count} ({round(percent, 2)}%)\n"
            send_message(peer_id, response)
            continue

        # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        cursor.execute("SELECT keyword, response FROM keywords")
        keywords = cursor.fetchall()
        response = None
        for keyword, resp in keywords:
            if str(keyword) in msg_text:
                response = resp
                break

        if response:
            send_message(peer_id, response)
        else:
            send_message(peer_id, "‚ùå –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –û–ø–∏—à–∏—Ç–µ –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
            cursor.execute("UPDATE users SET message_count = message_count + 1 WHERE user_id = ?", (user_id,))

        cursor.execute("SELECT message_count FROM users WHERE user_id = ?", (user_id,))
        message_count = cursor.fetchone()[0]

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª 5 —Å–æ–æ–±—â–µ–Ω–∏–π, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        if message_count == 5:
            for admin_id in ADMIN_ID:
                if can_send_message(admin_id):
                    cursor.execute("SELECT first_name, last_name FROM users WHERE user_id = ?", (user_id,))
                    first_name, last_name = cursor.fetchone()
                    mention = f"[id{user_id}|{first_name} {last_name}]"
                    message_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –æ—Ç–ø—Ä–∞–≤–∏–ª 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–º–æ—â–∏."
                    keyboard = VkKeyboard(one_time=True)
                    keyboard.add_button('–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', color=VkKeyboardColor.PRIMARY,
                                        payload={"action": "respond", "user_id": user_id})
                    send_message(admin_id, message_text, keyboard=keyboard.get_keyboard())
                else:
                    print(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        if message_count >= 5:
            keyboard = VkKeyboard(one_time=True)
            keyboard.add_button('–Ø –ø–æ–ª—É—á–∏–ª –ø–æ–º–æ—â—å', color=VkKeyboardColor.POSITIVE, payload={"action": "reset_counter"})
            send_message(peer_id,
                         "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                         keyboard=keyboard.get_keyboard())

        conn.commit()
>>>>>>> origin/master
