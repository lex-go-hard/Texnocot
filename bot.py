import datetime
import os
import sqlite3
from datetime import datetime

import pandas as pd
import vk_api
from dotenv import load_dotenv
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("keys.env")
GROUP_TOKEN = os.getenv('GROUP_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))
ADMIN_ID = list(map(int, os.getenv('ADMIN_ID').split(",")))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_db.sqlite')
cursor = conn.cursor()


# üì® –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
def get_group_members():
    members = vk.groups.getMembers(group_id=GROUP_ID)['items']
    return members


# –§–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
awaiting_news_message = False


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def create_tables():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS keywords (
            keyword TEXT PRIMARY KEY,
            response TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS message_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            keyword TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_name TEXT,
            last_name TEXT,
            age INTEGER,
            city TEXT,
            status TEXT,
            last_seen DATETIME
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_activity (
            user_id INTEGER PRIMARY KEY,
            message_count INTEGER DEFAULT 0,
            last_activity DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")


def get_user_stats():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        cursor.execute('''
             SELECT u.user_id, u.first_name, u.last_name, u.age, u.city, u.status, 
                    a.message_count, a.last_activity
             FROM users u
             JOIN user_activity a ON u.user_id = a.user_id
             ORDER BY a.message_count DESC
         ''')
        return cursor.fetchall()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


def update_user_activity(user_id):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        cursor.execute('''
            INSERT INTO user_activity (user_id, message_count, last_activity)
            VALUES (?, 1, CURRENT_TIMESTAMP)
            ON CONFLICT(user_id) DO UPDATE SET
            message_count = message_count + 1,
            last_activity = CURRENT_TIMESTAMP
        ''', (user_id,))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


def update_user_info(user_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ VK API
        user_info = vk.users.get(user_ids=user_id, fields='first_name,last_name,city,bdate,status,last_seen')[0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        first_name = user_info.get('first_name', '')
        last_name = user_info.get('last_name', '')
        city = user_info.get('city', {}).get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')
        bdate = user_info.get('bdate', '')
        status = user_info.get('status', '')
        last_seen = datetime.fromtimestamp(user_info.get('last_seen', {}).get('time', 0))

        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç (–µ—Å–ª–∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–∞)
        age = None
        if bdate:
            try:
                birth_date = datetime.strptime(bdate, "%d.%m.%Y")
                age = datetime.now().year - birth_date.year
            except ValueError:
                pass

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, first_name, last_name, age, city, status, last_seen)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, first_name, last_name, age, city, status, last_seen))

        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")


# üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
def handle_file_upload(file_url, peer_id):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel-—Ñ–∞–π–ª
        df = pd.read_excel(file_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if 'keyword' not in df.columns or 'response' not in df.columns:
            send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞! –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: 'keyword' –∏ 'response'.")
            return

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = df[['keyword', 'response']].drop_duplicates()

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
        df = df.dropna()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã
        cursor.execute("SELECT keyword FROM keywords")
        existing_keywords = {row[0] for row in cursor.fetchall()}

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        new_data = df[~df['keyword'].isin(existing_keywords)]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for _, row in new_data.iterrows():
            cursor.execute("INSERT INTO keywords (keyword, response) VALUES (?, ?)", (row['keyword'], row['response']))

        conn.commit()
        send_message(peer_id, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

    except Exception as e:
        send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


# üì© –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(peer_id, text):
    vk.messages.send(
        peer_id=peer_id,
        message=str(text),
        random_id=0
    )


# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_admin_stats():
    cursor.execute('''
        SELECT keyword, COUNT(*) as count, 
               (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM message_log)) as percent 
        FROM message_log 
        GROUP BY keyword 
        ORDER BY count DESC
    ''')
    return cursor.fetchall()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=GROUP_TOKEN)
longpoll = VkBotLongPoll(vk_session, GROUP_ID)
vk = vk_session.get_api()
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
create_tables()

# üõ†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        message = event.object.message
        msg_text = message['text'].lower()
        user_id = message['from_id']
        peer_id = message['peer_id']
        print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: '{msg_text}' –æ—Ç user_id: {user_id} | peer_id: {peer_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        update_user_info(user_id)
        update_user_activity(user_id)

        if msg_text == "/stats_users" and user_id in ADMIN_ID:
            stats = get_user_stats()
            response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for user in stats:
                user_id, first_name, last_name, age, city, status, message_count, last_activity = user
                response += (
                    f"üë§ {first_name} {last_name} (ID: {user_id})\n"
                    f"- –í–æ–∑—Ä–∞—Å—Ç: {age if age else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"- –ì–æ—Ä–æ–¥: {city}\n"
                    f"- –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"- –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
                    f"- –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
                )
            send_message(peer_id, response)
            continue

        # üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /upload (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
        if msg_text == "/upload" and user_id in ADMIN_ID:
            send_message(peer_id, "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–≤—É–º—è —Å—Ç–æ–ª–±—Ü–∞–º–∏: 'keyword' –∏ 'response'.")
            for event in longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    upload_message = event.object.message
                    if upload_message['from_id'] in ADMIN_ID and 'attachments' in upload_message:
                        for attachment in upload_message['attachments']:
                            if attachment['type'] == 'doc' and attachment['doc']['ext'] == 'xlsx':
                                file_url = attachment['doc']['url']
                                handle_file_upload(file_url, peer_id)
                                break
                        break
            continue

        # üë®‚Äçüíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ /news
        if msg_text == "/news" and (user_id in ADMIN_ID):
            send_message(peer_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
            awaiting_news_message = True
            continue
            # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        if awaiting_news_message and (user_id in ADMIN_ID):
            news_message = msg_text
            members = get_group_members()
            for member in members:
                try:
                    send_message(member, news_message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member}: {e}")
            send_message(peer_id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            awaiting_news_message = False
            continue

        # üë®‚Äçüíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
        if msg_text == "/stats" and user_id in ADMIN_ID:
            stats = get_admin_stats()
            response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            for keyword, count, percent in stats:
                response += f"- {keyword}: {count} ({round(percent, 2)}%)\n"
            send_message(peer_id, response)
            continue

        # üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        cursor.execute("SELECT keyword, response FROM keywords")
        keywords = cursor.fetchall()
        response = None
        matched_keyword = None
        for keyword, resp in keywords:
            if str(keyword) in msg_text:
                response = resp
                matched_keyword = keyword
                break

        # üìù –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if response:
            send_message(peer_id, response)
            cursor.execute('''
                INSERT INTO message_log (user_id, keyword) 
                VALUES (?, ?)
            ''', (user_id, matched_keyword))
        else:
            send_message(peer_id, "‚ùå –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –û–ø–∏—à–∏—Ç–µ –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        conn.commit()
