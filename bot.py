import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import sqlite3
from dotenv import load_dotenv
import os
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("keys.env")
GROUP_TOKEN = os.getenv('GROUP_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã
ADMIN_ID = int(os.getenv('ADMIN_ID'))
ADMIN_ID2 = int(os.getenv('ADMIN_ID2'))
USER_TOKEN = os.getenv('USER_TOKEN')  # –¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_db.sqlite')
cursor = conn.cursor()


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def create_tables():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS keywords (
            keyword TEXT PRIMARY KEY,
            response TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS message_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            keyword TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")


# üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
create_tables()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=GROUP_TOKEN)
longpoll = VkBotLongPoll(vk_session, GROUP_ID)
vk = vk_session.get_api()


# üì© –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(peer_id, text):
    vk.messages.send(
        peer_id=peer_id,
        message=text,
        random_id=0
    )


# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_admin_stats():
    cursor.execute('''
        SELECT keyword, COUNT(*) as count,
               (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM message_log)) as percent
        FROM message_log
        GROUP BY keyword
        ORDER BY count DESC
    ''')
    return cursor.fetchall()


# üì® –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
def get_group_members():
    members = vk.groups.getMembers(group_id=GROUP_ID)['items']
    return members


# –§–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
awaiting_news_message = False

# –§–ª–∞–≥–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
awaiting_poll_question = False
awaiting_poll_options = False
awaiting_poll_settings = False
poll_question = ""
poll_options = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ VK API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
user_vk_session = vk_api.VkApi(token=USER_TOKEN)
user_vk = user_vk_session.get_api()

# üõ†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        message = event.object.message
        msg_text = message['text'].lower()
        user_id = message['from_id']
        peer_id = message['peer_id']

        print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: '{msg_text}' –æ—Ç user_id: {user_id} | peer_id: {peer_id}")

        # üë®‚Äçüíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ /stats
        if msg_text == "/stats" and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            stats = get_admin_stats()
            response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            for keyword, count, percent in stats:
                response += f"- {keyword}: {count} ({round(percent, 2)}%)\n"
            send_message(peer_id, response)
            continue

        # üë®‚Äçüíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ /poll
        if msg_text == "/poll" and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            send_message(peer_id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:")
            awaiting_poll_question = True
            continue

        # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞
        if awaiting_poll_question and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            poll_question = msg_text
            send_message(peer_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1. –æ—Ç–≤–µ—Ç; 2. –æ—Ç–≤–µ—Ç':")
            awaiting_poll_question = False
            awaiting_poll_options = True
            continue

        # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
        if awaiting_poll_options and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            poll_options = [option.strip() for option in msg_text.split(';')]
            send_message(peer_id, "–í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞ (—Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n"
                                  "1. –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å\n"
                                  "2. –í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
                                  "3. –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –æ—Ç–º–µ–Ω—É –≥–æ–ª–æ—Å–∞\n"
                                  "–ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ 0 0 0.")
            awaiting_poll_options = False
            awaiting_poll_settings = True
            continue

        # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞
        if awaiting_poll_settings and (user_id == ADMIN_ID or user_id == ADMIN_ID2):
            settings = msg_text.split(" ")
            is_anonymous = '1' in settings
            is_multiple = '2' in settings
            disable_unvote = '3' in settings

            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ JSON-—Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
                answers_json = json.dumps([option for option in poll_options], ensure_ascii=False)

                # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ user-token
                if settings[1] != "0":
                    poll = user_vk.polls.create(
                        question=poll_question,
                        add_answers=answers_json,  # –ü–µ—Ä–µ–¥–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
                        owner_id=ADMIN_ID,  # –°–æ–∑–¥–∞–µ–º –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        is_anonymous=is_anonymous,
                        is_multiple=is_multiple,
                        disable_unvote=disable_unvote
                    )
                else:
                    poll = user_vk.polls.create(
                        question=poll_question,
                        add_answers=answers_json,  # –ü–µ—Ä–µ–¥–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
                        owner_id=ADMIN_ID,  # –°–æ–∑–¥–∞–µ–º –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        is_anonymous=None,
                        is_multiple=None,
                        disable_unvote=None
                    )

                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –æ–ø—Ä–æ—Å–æ–º –≤ –≥—Ä—É–ø–ø–µ
                post = vk.wall.post(
                    owner_id=-GROUP_ID,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID –¥–ª—è –≥—Ä—É–ø–ø—ã
                    message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å!",
                    attachments=f"poll{poll['owner_id']}_{poll['id']}"
                )

                send_message(peer_id, "‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ —Å—Ç–µ–Ω–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.")
            except Exception as e:
                send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")

            awaiting_poll_settings = False
            continue

        # üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        cursor.execute("SELECT keyword, response FROM keywords")
        keywords = cursor.fetchall()
        response = None
        matched_keyword = None

        for keyword, resp in keywords:
            if keyword in msg_text:
                response = resp
                matched_keyword = keyword
                break

        # üìù –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if response:
            send_message(peer_id, response)
            cursor.execute('''
                INSERT INTO message_log (user_id, keyword)
                VALUES (?, ?)
            ''', (user_id, matched_keyword))
        else:
            send_message(peer_id, "‚ùå –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –û–ø–∏—à–∏—Ç–µ –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")

        conn.commit()
